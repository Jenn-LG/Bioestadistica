#| echo: false
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
from sklearn.linear_model import LinearRegression
import statsmodels.api as sm
from scipy.stats import f_oneway
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
#| echo: false
# Cargar los archivos
tsm_df = pd.read_excel("data/Base de datos TSM consultoria estadística.xlsx")
chla_df = pd.read_excel("data/Base de datos Chla consultoria estadística.xlsx")
coords_raw = pd.read_csv("data/Coordenadas zona costera occidental GC.csv", header=None)
#| echo: false
# Eliminar la columna ORDEN
chla_df = chla_df.drop(columns=["ORDEN"])
tsm_df = tsm_df.drop(columns=["ORDEN"])
# Preparar coordenadas
coords_df = coords_raw[[0, 2]]
coords_df.columns = ["Longitud", "Latitud"]
coords_df["Estacion"] = range(1, len(coords_df) + 1)
# Verificar y eliminar última fila vacía de TSM si existe
tsm_df = tsm_df.iloc[:-1]
# Reemplazar etiqueta 'Neutro' por 'Normal' en EVENTO INTERANUAL
tsm_df["EVENTO INTERANUAL"] = tsm_df["EVENTO INTERANUAL"].replace("Neutro", "Normal")
# Reestructurar TSM a formato largo
tsm_long = tsm_df.melt(
id_vars=["FECHA", "AÑO", "MES", "ESTACIÓN DEL AÑO", "EVENTO INTERANUAL"],
var_name="Estacion",
value_name="TSM"
)
# Limpiar nombres de estaciones en TSM
tsm_long["Estacion"] = tsm_long["Estacion"].str.replace("Est ", "").str.replace("°", "").str.strip()
# Reestructurar Chl-a a formato largo
chla_long = chla_df.melt(
id_vars=["FECHA", "AÑO", "MES", "ESTACIÓN DEL AÑO", "EVENTO INTERANUAL"],
var_name="Estacion",
value_name="Chla"
)
# Limpiar nombres de estaciones en Chl-a
chla_long["Estacion"] = chla_long["Estacion"].str.replace("Est ", "").str.replace("°", "").str.strip()
# Conversión de tipos
tsm_long["Estacion"] = tsm_long["Estacion"].astype(int)
tsm_long["AÑO"] = tsm_long["AÑO"].fillna(-1).astype(int)
chla_long["Estacion"] = chla_long["Estacion"].astype(int)
chla_long["AÑO"] = chla_long["AÑO"].astype(int)
# Convertir columnas FECHA a datetime
tsm_long["FECHA"] = pd.to_datetime(tsm_long["FECHA"])
chla_long["FECHA"] = pd.to_datetime(chla_long["FECHA"])
# Recortar ambos conjuntos al mismo rango de fechas
fecha_inicio = max(tsm_long["FECHA"].min(), chla_long["FECHA"].min())
fecha_fin = min(tsm_long["FECHA"].max(), chla_long["FECHA"].max())
tsm_long = tsm_long[(tsm_long["FECHA"] >= fecha_inicio) & (tsm_long["FECHA"] <= fecha_fin)]
chla_long = chla_long[(chla_long["FECHA"] >= fecha_inicio) & (chla_long["FECHA"] <= fecha_fin)]
# Integrar coordenadas geográficas
tsm_geo = pd.merge(tsm_long, coords_df, on="Estacion", how="left")
chla_geo = pd.merge(chla_long, coords_df, on="Estacion", how="left")
#| echo: false
# Unir los datos en un solo dataframe
df = pd.merge(
chla_geo,
tsm_geo[["FECHA", "AÑO", "MES", "EVENTO INTERANUAL", "Estacion", "TSM"]],
on=["FECHA", "AÑO", "MES", "EVENTO INTERANUAL", "Estacion"],
how="inner"
)
df.head()
#| echo: false
print("Valores nulos por columna: \n", df.isnull().sum())
#| echo: false
#Verificar tipos de dato
print("Tipos de dato originales:\n", df.dtypes)
df.describe()
#| echo: false
# Estadísticas descriptivas por estación – Temperatura
print("Temperatura - Estadísticas descriptivas por estación:")
tsm_stats = tsm_long.groupby("Estacion")["TSM"].describe()[["mean", "std", "min", "max"]]
print(tsm_stats)
# Estadísticas descriptivas por estación – Clorofila
print("\nClorofila - Estadísticas descriptivas por estación:")
chla_stats = chla_long.groupby("Estacion")["Chla"].describe()[["mean", "std", "min", "max"]]
print(chla_stats)
reticulate::repl_python()
